# -*- coding: utf-8 -*-
"""Color_match

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UbM4EmuD1jo5aTcdaP0HUiFZfKZ9bor0
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
import colorsys

uploaded = files.upload()
image_path = list(uploaded.keys())[0]

img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)

mean_hsv = np.mean(hsv.reshape(-1, 3), axis=0).astype(int)
h, s, v = mean_hsv

lower_bound = np.array([max(h-10,0), max(s-40,0), max(v-40,0)])
upper_bound = np.array([min(h+10,179), min(s+40,255), min(v+40,255)])

mask = cv2.inRange(hsv, lower_bound, upper_bound)

result = cv2.bitwise_and(img, img, mask=mask)
color_pixels = result[np.where(mask != 0)]
avg_rgb = np.mean(color_pixels, axis=0).astype(int) if len(color_pixels) > 0 else mean_hsv
dominant_color = tuple(avg_rgb)

def rgb_to_hex(rgb):
    return "#{:02x}{:02x}{:02x}".format(*rgb)

def generate_matching_colors(rgb):
    r, g, b = rgb
    h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)

    matches = {}

    comp_h = (h + 0.5) % 1.0
    matches["Complementary"] = tuple(int(c*255) for c in colorsys.hsv_to_rgb(comp_h, s, v))

    ana1_h = (h + 0.0833) % 1.0
    ana2_h = (h - 0.0833) % 1.0
    matches["Analogous 1"] = tuple(int(c*255) for c in colorsys.hsv_to_rgb(ana1_h, s, v))
    matches["Analogous 2"] = tuple(int(c*255) for c in colorsys.hsv_to_rgb(ana2_h, s, v))

    tri1_h = (h + 0.3333) % 1.0
    tri2_h = (h - 0.3333) % 1.0
    matches["Triadic 1"] = tuple(int(c*255) for c in colorsys.hsv_to_rgb(tri1_h, s, v))
    matches["Triadic 2"] = tuple(int(c*255) for c in colorsys.hsv_to_rgb(tri2_h, s, v))

    return matches

matching_colors = generate_matching_colors(dominant_color)

fig, ax = plt.subplots(1, len(matching_colors)+1, figsize=(15, 4))

ax[0].imshow(np.ones((100,100,3), dtype=np.uint8)*dominant_color)
ax[0].set_title(f"Filtered\n{rgb_to_hex(dominant_color)}")
ax[0].axis("off")

for i, (name, color) in enumerate(matching_colors.items(), start=1):
    ax[i].imshow(np.ones((100,100,3), dtype=np.uint8)*color)
    ax[i].set_title(f"{name}\n{rgb_to_hex(color)}")
    ax[i].axis("off")

plt.show()